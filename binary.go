// Code generated by go-bindata.
// sources:
// assets/public/js/.jsbeautifyrc
// assets/public/js/application.js
// DO NOT EDIT!

package hugo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicJsJsbeautifyrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\xdd\x6a\xe4\x46\x13\xbd\x5f\xd8\x77\x28\xe6\xe6\x1b\x83\xed\xf1\x7e\x71\x36\xc1\x77\x0e\x18\xb2\x64\xd7\x18\x26\x90\x40\x1c\xe4\x1e\x75\xc9\xea\xb5\xd4\xad\xf4\x8f\x47\x93\x90\x77\xcf\xa9\x96\x66\x46\x5a\x7b\x09\x01\x9b\x91\xba\xab\x4e\x55\x9d\x3a\x55\xfa\xeb\xed\x1b\xa2\xc5\xe7\xb0\xb8\xa2\xfc\x88\x17\xd5\x34\x6e\xcb\xba\xa8\x4c\xc3\x05\xf7\x91\x6d\x30\xce\x8a\xc5\x6f\x62\x78\x2a\xe6\xce\x0e\xbf\xb5\xb1\xd1\x97\xc3\xf3\x86\x55\x8a\xa6\xda\xe1\xfd\xf7\xd3\xb7\x6f\x06\xb4\xd5\x8a\xd6\x1c\x69\xe3\x55\xc9\x45\x88\xbb\x86\x0f\xe7\x54\xba\xa6\x51\x5d\xe0\x2b\x5a\xba\x46\x93\xe6\x4a\xa5\x26\x9e\xd0\x5d\x1a\x1d\x02\x39\x4b\xb1\x66\x0a\xaa\x65\x6a\x8c\x65\x52\x01\x6e\x88\xe9\x1a\x0a\x51\x45\x6e\xd9\xc6\xf0\x12\xf2\xac\xf3\x1c\xd8\x3f\xf3\x99\xb1\xe2\x87\x10\x96\xb7\xc7\x10\x6b\x01\xcc\x58\x83\x3d\x6d\x24\x26\xc7\xc8\x9e\x42\xea\x3a\xe7\x23\x55\xce\xd3\xcd\xfa\x3d\x9c\x42\xf4\xa9\x8c\xc9\x1b\xfb\x48\xca\x6a\x72\xc8\xc9\x53\xc5\x0a\x67\x1c\xce\xa9\x8e\xb1\x0b\x57\xab\xd5\xa3\x89\x75\xda\x9c\x97\xae\x5d\x3d\x9b\x32\x3a\x0f\x1c\x57\xad\xd6\x69\xd3\x98\x96\xcf\x7e\xfc\xf9\xd3\xc7\x3b\x8f\x20\x20\x69\x65\x42\x48\x1c\x56\xff\xff\xe6\xdd\x31\x7b\xee\x3b\xc0\x5f\x7d\x41\x80\xdb\xda\xa1\xf6\xe5\x75\xd3\xb4\xca\xd2\x8a\xae\x6f\xd7\x1f\x28\xb3\x79\x32\xf1\xb6\xfa\x6c\x8a\x80\xf7\x57\x50\x8e\xf6\xd6\x09\x2f\x3f\x31\x77\xc2\x71\x4b\x5b\x14\xc5\xf2\xb8\x23\xe5\x47\xbb\xc5\xa4\x71\x10\xc0\xe2\x6b\xfc\x2e\x0e\x0d\x87\x07\xab\xa7\xa2\xac\x15\x8e\x75\xd1\x72\xac\x9d\x16\xf1\x54\xaa\x09\x7c\x2a\x91\x7f\x10\x0b\x1a\x2d\x68\xb0\xa0\x12\xb2\x0b\xa4\x4a\xef\x42\x40\x0b\x36\x81\xff\x48\xe8\x6d\xce\x79\x6c\xf0\x82\x2f\xfb\x19\xd0\x9d\x82\xed\xcd\xe5\xaf\xd4\xb7\x0d\x0c\xd1\x3c\x5c\xa1\x02\xef\xd2\x63\x4d\xc9\x46\x97\xca\x9a\xf5\xde\xdb\xea\x62\x8b\x0e\x15\x50\x42\xce\x79\x0a\x75\x23\x6d\x4d\xb1\x03\x6f\x62\x43\xa3\xcd\xe8\x6a\xac\x46\x2e\x52\x94\x17\x16\x68\x91\x7d\x3e\xe4\x53\x15\x31\x1d\x52\x0d\x98\x42\x06\x73\x8f\x86\x9f\xb9\x81\xcb\xc5\xe8\x60\xa2\x51\x0d\x99\x89\x63\xb6\x98\x3b\x05\xf3\xa7\x24\x77\xf9\x22\x88\x5c\xcc\x4d\x73\x3d\x51\x6d\xe6\x04\x0f\x3e\x43\x21\x72\x79\x4a\xee\x99\xbd\x37\x50\x32\x3d\x4c\x82\x3c\x64\x35\x3f\x4c\xaa\x7b\x18\xe1\x3f\x07\x54\x1f\x8b\x5a\x75\xdd\x6e\x0e\x5d\x11\x86\x01\xcf\xd0\x89\xa5\xc1\xec\x0c\xf3\x61\xa4\x76\x6a\x9d\x66\x32\x01\xd2\xc3\xf0\x94\x07\xe6\x9f\xa0\xb1\x42\x79\xaf\x76\xc5\xa4\xf4\x79\x2b\x47\x3d\x51\x36\x9b\x32\x34\xc5\xa8\x92\x2d\xe5\xec\xdf\x61\xf6\x96\xaf\x20\xb5\xaa\x2f\xf6\xf2\xdd\x6b\x21\x1c\x7a\xf4\x49\xf5\xa6\x4d\x2d\xd9\xd4\x6e\x50\x91\xab\x86\xd9\xcb\xaa\x86\xb6\x1c\xb6\x04\xed\xbd\x35\xd0\x31\x5b\x8c\xee\x27\xfb\x44\xcb\x0b\xd2\x26\xa8\x4d\xc3\x61\x1c\xcb\xc5\x6b\x71\x06\xfe\x10\xea\x97\x9a\xf3\x22\xe1\xde\x84\x28\xbb\x65\x1a\x29\xd4\x2e\x61\x29\x4e\xa3\x8d\x98\xa1\x93\x91\x54\x15\x08\x2f\x14\x86\xf8\xc0\xca\x8c\x89\xf5\xe0\x9f\xb7\xa7\x38\x00\x09\x3d\x01\xbf\x96\xc4\x69\xd7\xba\x14\x0e\x2c\xfd\x2f\x50\x87\x99\xb7\x41\xe2\x29\xad\x59\x63\xa3\xef\x2f\x97\x27\x0b\x7a\x0e\xc7\x77\xc2\xc1\x2c\x95\x01\xb9\xc0\x5e\xd6\x46\x0c\x54\x33\xad\xf2\x6b\x89\x4c\xcc\x8f\xab\x7c\x1a\xdf\x54\x4b\x01\x19\xa3\x9b\x8a\xc6\xd7\x59\x6c\x63\x0b\x6e\xbb\xb8\x2b\x72\xfe\x33\x06\xae\xb5\x46\x55\x5a\x0b\xb3\xd9\x38\xe4\x89\x40\xcb\xb2\xc7\x50\xb1\xd4\x79\x28\x70\x49\x2f\xd1\xff\x0b\xee\x88\x68\xf8\x9c\x80\xa5\x4e\x69\x43\x7b\x21\x24\xf4\xbe\x54\x9d\xac\x52\xf9\x8c\x84\xd7\x7a\xd5\xe1\x26\x8a\x7c\x8e\xdb\x24\x88\xc2\x46\x17\x4c\x55\x89\xf9\xca\xa2\xbb\xef\x6f\x6f\xb1\xc0\xc7\xbd\x00\xd2\xf6\xf8\x42\x1c\xf7\xaa\xed\xb0\xaf\x73\x51\xf7\xfd\xfb\x6f\xef\xfb\xef\xbe\xc7\xef\x3b\xfc\x6b\x3c\x5f\xe0\xb7\x94\xf3\x7d\xb1\x5b\xaf\xba\x42\xc4\x87\x7d\x65\x1f\x63\x2d\xc3\x20\x79\x7d\x14\xc5\xee\x95\x28\x46\xa4\x22\x36\x63\x1f\xc9\xe5\x4f\x64\xc2\x3e\xc3\xc7\x42\x94\x88\xfe\x62\xee\x8f\x43\x33\xa9\xe0\xcb\xb1\xf8\xfb\xed\x1b\xfc\xfd\x13\x00\x00\xff\xff\xd4\xe2\xf3\xe3\x79\x08\x00\x00")

func publicJsJsbeautifyrcBytes() ([]byte, error) {
	return bindataRead(
		_publicJsJsbeautifyrc,
		"public/js/.jsbeautifyrc",
	)
}

func publicJsJsbeautifyrc() (*asset, error) {
	bytes, err := publicJsJsbeautifyrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/.jsbeautifyrc", size: 2169, mode: os.FileMode(438), modTime: time.Unix(1467209874, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicJsApplicationJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\x6d\x6f\xdb\x36\x10\xfe\x9c\x00\xf9\x0f\x9c\x06\x54\x12\xe6\xc8\x49\x36\x60\x40\x62\x07\xe8\x9a\x0e\xe9\x96\x2c\x43\x93\x01\x03\x86\x01\xa1\xc5\xb3\xcd\x46\xa2\x3c\x8a\x4a\x66\xac\xfe\xef\xbb\xd3\x9b\xdf\x28\x5b\x6a\xaa\x2f\x56\x44\x3e\x0f\xef\x1e\xde\x5b\xeb\x66\x29\xb0\xd4\x68\x19\x1a\xf7\xe2\xe8\xf0\xe8\x50\x24\x61\x16\x83\x32\x01\x17\xe2\xfd\x33\xbe\xdc\xc8\xd4\x80\x02\xed\xb9\x57\x77\xb7\xef\x12\x65\xe8\x5b\xc2\x05\x08\xb7\xc7\x80\x76\xb0\xe1\x25\xfb\xef\xe8\x90\xe1\x53\xa3\x27\x60\xde\x47\x40\xaf\x3f\xcd\x3f\x08\xcf\x8d\x92\x49\x92\x19\xd7\x0f\xa4\x4a\x41\x9b\xb7\xe2\x13\x0f\x71\xf1\xfa\xe1\xf6\xc6\x73\x47\x30\x4e\x34\x8c\x60\x22\x15\x72\x3e\x0e\x38\x9b\x6a\x18\x0f\x9d\x3e\x17\xb1\x54\xfd\x14\x8c\x91\x6a\x92\xf6\x9d\xcb\xe2\x14\xc6\x06\x42\x3e\xb3\x30\xe2\x69\x3a\x74\x78\x68\x64\xa2\x96\x6b\x6c\x20\xab\xa5\x98\x1b\xd0\x92\x47\xc7\x32\x4c\x54\xea\x5c\x56\x4c\x83\xbe\x5c\x52\xf5\x91\xab\xfa\x6b\xd0\xe7\x97\x8f\x3e\x0a\xb1\xf0\xf7\xa9\x11\xe1\x1b\x72\x59\x44\x90\x63\xe6\xbd\x48\x25\x92\x97\x20\x4a\x42\x4e\xd6\x05\x33\x6e\xa6\x8a\xc7\x80\xfe\x87\x51\x26\x20\xf5\xdc\x7e\x58\x88\xd9\x77\x7d\xbf\x82\xee\xd4\x50\xc1\x8b\x90\x1a\x35\x9c\x45\x28\xde\x34\x89\x04\x68\x36\x64\xce\x58\x46\xf0\xd7\x39\xd7\xe1\x14\xcc\x7c\x06\x7f\x07\x41\xe0\x5c\x74\xe1\xd3\x10\x27\xcf\xb0\xe1\xdf\x13\xcc\xd1\x03\xba\x10\xdc\x77\x25\x75\xbe\xec\x77\xe2\xdd\x16\x6d\x49\xba\x2a\xda\x92\xb3\x92\x2f\x5f\x0d\x70\xf7\xbb\x44\x00\x1b\x0e\xd9\xd9\x8f\x6b\x1a\xb5\xb7\x21\x8f\x04\x32\x20\x30\xc9\x64\x12\x81\xe7\x82\xe2\xa3\x08\xa3\x77\xd5\x97\xea\xc1\x00\x79\x90\x31\x60\xa8\x7a\x9e\xbf\x72\xa5\xdd\xcf\x7d\xe6\x51\x86\x96\x33\xd7\xb5\x1c\xb3\xe8\xb1\xb3\x93\x93\x4d\x03\x16\xad\x94\x38\xfd\xde\xaa\x44\xb1\x6f\xa6\xf3\xdf\x2b\x18\xf3\x2c\x32\x5e\x11\xc4\x9b\x5b\x23\x30\xac\x32\xaf\xa5\x23\x16\x1f\x88\x05\x83\x1c\xfe\x45\x96\x7c\x4f\x80\x4a\x9b\x0f\xf4\xe5\x6e\xec\xb9\xe7\x56\x7d\x09\x44\x69\x50\x63\xd2\x6c\x44\xd5\x47\x4d\xbc\x93\x5e\x41\xd7\x04\xab\xe3\xdb\x82\x2d\xec\xf8\x8e\x9d\xf6\x2a\x53\x40\x4d\xcc\xd4\x46\x45\x9a\x16\x16\x60\xe6\x38\x7e\x65\x4d\xcd\xde\x00\x29\x3d\x1d\xb2\xe3\x53\x7f\xcd\x14\xc7\x69\xd4\x78\x94\x19\x93\xa8\x3d\x22\x37\xca\x34\x35\x71\x84\xd8\x82\x24\x08\xa7\x5c\x4d\xe0\x21\xa1\xca\x4b\x1e\x37\xa1\x34\xfc\x93\x41\x8a\x89\x45\x59\xcb\xfe\xbc\xbd\xb9\x36\x66\xf6\xb1\xf8\x68\x05\x95\x80\x20\x99\x81\xf2\x9c\xdf\xef\xee\x1f\x9c\x1e\xdb\xa8\x5e\xbb\x70\x98\x31\x25\xfd\x35\x60\x53\xc0\x1c\xff\x19\xcb\x11\xa9\x4a\x95\x03\x7f\xba\x81\xdf\x56\xd2\x22\xba\x96\x79\x37\x85\x12\xbb\x1d\x53\x1a\xb9\xe7\xa9\xc1\x5e\x50\xa8\x88\xe2\x8c\x33\x95\x77\x0d\xcf\x9a\x4b\xf4\xd0\xa5\x57\x14\x39\xc1\x3d\x11\x50\x04\xfc\xd0\x88\xa1\x67\xe3\xbe\xae\x12\x05\x5e\x4d\x44\x46\x64\x29\xfb\x66\x98\xa7\x7f\x2f\xbf\x63\x9b\xed\x36\x23\x4a\xec\xb0\xc0\xee\x32\x81\x9e\x8d\x1b\x44\x97\x9b\x3a\x12\xa6\x0d\xfd\xec\xb0\x62\x61\x5f\xb2\x7c\x5e\x6c\x15\xb4\xfa\xb5\x72\x73\xd1\xa6\xb7\x82\x90\x26\xd1\x5d\xe6\x0b\xac\x05\xb1\x6c\x9a\x2f\xf8\x18\xc7\x00\x8c\x93\x7c\xb8\x58\x99\x1c\xb4\x9c\x4c\x0d\x0d\x0e\x07\x6c\x50\x26\xab\x14\x43\x67\x96\x8d\xb0\xb9\x4f\xf3\x05\x5c\x49\x67\x5c\xe5\xaf\x07\xbb\x06\x0b\x25\x8a\xa1\x82\x10\xfd\x1a\x52\xa2\x4b\xc6\xe5\x02\xee\x29\x0e\x2c\xff\xa0\x11\xe4\x71\x59\xad\xe9\xde\xbd\x46\x5f\x05\x1e\xee\xfa\xec\xf3\xe7\x66\x39\xca\x03\x8b\x9d\x3e\x7b\xf3\xa6\x79\x6b\xa9\xb5\x1f\xe0\x66\x8e\x09\x19\x3c\x61\xa0\xe4\xd5\x31\x4c\xe2\x19\xd6\x14\x70\xec\xe3\x09\x86\xa5\x9e\xdf\x43\x04\x21\xe2\x3d\xf7\xdb\x82\x88\x05\xb9\xaa\xbb\x6e\xa2\x1e\xf4\xd6\x54\x4f\x31\xd9\x45\x16\x41\x21\xfb\x01\x5b\x15\xfe\x60\xc7\x4c\xc7\x23\xae\xe3\x4a\x7b\x82\x2d\xd5\xaf\x49\xee\x4b\xee\xd5\x9b\x59\x5e\xc1\xe3\x7a\x9b\x6c\x8e\xb1\x92\xc5\x3a\xd9\x84\x91\x0c\x9f\x2c\x11\x5b\x3d\x2d\xfb\x33\xd5\x70\x91\x17\x9a\x66\x3b\x8a\x5b\xb5\x36\x66\x0a\x9c\x7d\x41\x71\x55\x06\x85\x6d\x9c\xda\x73\xf2\x1a\x83\xd5\x80\xad\x19\x86\x1c\xa2\x41\x97\x4b\x95\x4f\xab\x7b\xe3\xf0\x62\x1b\x5f\x44\xe4\x92\x66\x2d\x54\x2d\xfb\xb7\x1b\xef\x66\xac\x56\x57\xc9\x28\x1e\xce\xc7\x52\xa7\xe6\x38\x9c\xca\xa8\x98\x0a\xad\x57\xc2\xa9\x6d\x24\x3a\x3e\xfb\x94\x7a\x4d\xbc\xb4\x8e\xd2\x5a\x4c\xea\xd6\xcd\x3b\x77\xf2\x8d\x2e\xfe\x47\x8b\x26\xde\xdc\x83\x7f\x95\x79\xa9\x24\x71\xdb\x83\xaa\x14\x43\x20\x45\x51\x33\x10\xdb\xf5\x2f\xf7\x77\xbf\x05\xc5\xe8\x26\xc7\x73\x8f\xc4\xdd\x12\xed\x15\xed\xfb\x4b\x5a\xf7\x57\x69\xdb\xed\xda\xdf\x9e\x4e\x56\xe6\x58\xe7\x22\xd3\xa2\xc0\xec\xac\x0e\x42\x63\x71\xb6\xd4\x85\x46\xc0\x08\x23\xeb\xe9\xb8\x84\x95\xff\x86\x5c\x0b\xcc\x15\xff\x5f\x53\x05\xba\x54\x80\x76\xd9\x5f\x4a\xbc\x2f\xf9\x5f\x95\xf8\xdd\x92\xbe\x53\xc2\x77\x4c\xf6\xce\x89\xde\x0c\xf8\x08\x13\x0a\x44\x2a\xff\x3d\xe6\x18\x9d\xe1\x6c\x60\x05\xb6\x48\xf2\x2f\x4c\xf0\xae\xc9\xfd\xea\xc4\x5e\x6c\x05\xf4\xa2\xfe\x0f\xa2\xff\x03\x00\x00\xff\xff\x7e\xf1\x82\xcd\x3e\x13\x00\x00")

func publicJsApplicationJsBytes() ([]byte, error) {
	return bindataRead(
		_publicJsApplicationJs,
		"public/js/application.js",
	)
}

func publicJsApplicationJs() (*asset, error) {
	bytes, err := publicJsApplicationJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/js/application.js", size: 4926, mode: os.FileMode(438), modTime: time.Unix(1467314447, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/js/.jsbeautifyrc": publicJsJsbeautifyrc,
	"public/js/application.js": publicJsApplicationJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			".jsbeautifyrc": &bintree{publicJsJsbeautifyrc, map[string]*bintree{}},
			"application.js": &bintree{publicJsApplicationJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

